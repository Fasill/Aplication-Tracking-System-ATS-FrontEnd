{"version":3,"file":"static/js/629.07dc43b6.chunk.js","mappings":"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","sources":["components/Forms/loginForm.js","components/Forms/loginFormByEmail.js","pages/LoginAndSignUp/LoginAsOwner.js","utils/Links.js"],"sourcesContent":["import { useState,useEffect} from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {backEndLink} from '../../utils/Links.js';\n\n\nconst LoginForm = (props) => {\n  // State variables\n  const [isSubmitting, setIsSubmitting] = useState(false); // For form submission state\n  const [isEmpty, setIsEmpty] = useState(true); // To track if the form is empty\n  const navigate = useNavigate(); // React Router navigation\n  const [formData, setFormData] = useState({ email: '', password: '' }); // Form data\n  const [errorMessage, setErrorMessage] = useState(''); // Error message from the server\n\n  // Form validation schema using Yup\n  const schema = yup.object().shape({\n    email: yup.string().email('Invalid email format').required('Email is required'),\n    password: yup.string().required('Password is required'),\n  });\n\n  // Form hook setup\n  const { register, handleSubmit, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    // setIsEmpty(formData.email === '' || formData.password === '');\n  };\n\n  useEffect(() => {\n    const isFormFilled = Object.values(formData).every((value) => value !== '');\n    setIsEmpty(!isFormFilled);\n}, [formData]);\n\n  // Handle form submission\n  const onSubmit = () => {\n    \n    setIsSubmitting(true);\n    formData.role = props.role; // Set form type\n    console.log(formData)\n\n    // Send a POST request to the server\n    axios.post(`${backEndLink}/login`, formData)\n      .then((res) => {\n        const token = res.data.token;\n        console.log(res.data.message);\n\n        if (token) {\n          localStorage.setItem('token', token); // Store the token in local storage\n          navigate('/home'); // Navigate to the home page\n          setFormData({ email: '', password: '' }); // Clear form fields\n        }\n        setIsSubmitting(false);\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n\n        if (error.response && error.response.data && error.response.data.message) {\n          setErrorMessage(error.response.data.message); // Set error message from the server\n        } else {\n          setErrorMessage('An error occurred. Please try again.');\n        }\n        setIsSubmitting(false);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"grid gap-5 pb-10 h-full max-h-[30rem]\">\n      {/* Form Header */}\n      <h1 className=\"m-auto text-black text-3xl font-bold\">{props.tittle}</h1>\n\n      {/* Email Input */}\n      <div className=\"text-black grid justify-items-start\">\n        <label>Enter Email<span className=\"text-red-600\">: {errors.email?.message} {errorMessage === \"User not found.\" ||errorMessage ===  \"User not found2.\"? \"User not found.\" : \"\"}</span><span className='text-red-600'>{errorMessage === \"Unverified use try to login by email\"?\"Please log in with your email and complete your information.\":\"\"}</span></label>\n        <input\n          type=\"text\"\n          {...register(\"email\")}\n          value={formData.email}\n          onChange={handleChange}\n          className=\"p-3 border h-11 max-w-96 w-full border-gray-400 rounded-md focus:outline-none focus:border-blue-500 bg-transparent\"\n        />\n      </div>\n\n      {/* Password Input */}\n      <div className=\"text-black grid justify-items-start\">\n        <label>Enter Password <span className=\"text-red-600\">: {errors.password?.message} {errorMessage === \"Authentication failed. Incorrect password.\" ? \"Incorrect password.\" : \"\"}</span></label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          {...register(\"password\")}\n          value={formData.password}\n          onChange={handleChange}\n          className=\"p-3 border h-11 max-w-96 w-full border-gray-400 rounded-md focus:outline-none focus:border-blue-500 bg-transparent\"\n        />\n      </div>\n\n      {/* Forgot Password Link */}\n      <p className=\"font-bold justify-self-end text-[14px]\">\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-400 justify-self-end\">\n          Forgot your password?\n        </a>\n      </p>\n\n      {/* Login Button */}\n      <button\n        className={`rounded-md h-11 ${isEmpty ? 'border pointer-events-none border-gray-400 text-blue-400' : 'bg-blue-500 text-white hover:bg-blue-400'} rounded-md h-11 font-bold text-xl`}\n        type=\"submit\"\n        disabled={isSubmitting}\n      >\n        {isSubmitting ? <span className=\"loading loading-spinner loading-md \"></span> : \"Login\"}\n      </button>\n\n      {/* Create Account Links */}\n      <div className=\"grid gap-1 font-bold\">\n        <p className=\"m-0 text-left text-[14px] text-gray-600\">Login as Employer<a className=\"text-blue-500 hover:text-blue-400\" href=\"/login/employer\"> Login</a></p>\n        <p className=\"m-0 text-left text-[14px] text-gray-600\">Login as Supplier <a className=\"text-blue-500 hover:text-blue-400\" href=\"/login/supplier\"> Login</a></p>\n        <p className=\"m-0 text-left text-[14px] text-gray-600\">Login as Channel partner<a className=\"text-blue-500 hover:text-blue-400\" href=\"/login/channelPartner\"> Login</a></p>\n      \n      </div>\n    </form>\n  );\n}\n\nexport default LoginForm;\n","import { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useEffect } from 'react';\nimport {backEndLink} from '../../utils/Links.js';\n\nconst LoginFormByEmail = (props) => {\n  // State variables\n  const [isSubmitting, setIsSubmitting] = useState(false); // For form submission state\n  const [isEmpty, setIsEmpty] = useState(true); // To track if the form is empty\n  const navigate = useNavigate(); // React Router navigation\n  const [isLoading,setIsLoading] = useState(false)\n  const [formData, setFormData] = useState({ email: '', password: '' }); // Form data\n  const [errorMessage , setErrorMessage] = useState(''); // Error message from the server\n  const [errorMessage2 , setErrorMessage2] = useState(''); // Error message from the server\n\n  const [isEmailSent,setIsEmailSent] = useState(false);\n\n  function navigateWithPassword() {\n    setIsLoading(true)\n    const currentUrl = window.location.href;\n    const separator = currentUrl.includes('?') ? '&' : '?';\n    const newPasswordParameter = '&password=true';\n    const newUrl = `${currentUrl}${separator}${newPasswordParameter}`;\n    window.location.href = newUrl;\n    setIsLoading(false)\n\n  }\n  \n  // Form validation schema using Yup\n  const schema = yup.object().shape({\n    email: yup.string().email('Invalid email format').required('Email is required'),\n  });\n\n  // Form hook setup\n  const { register, handleSubmit, formState: { errors } } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    // setIsEmpty(formData.email === '' );\n  };\n\n  useEffect(() => {\n    setErrorMessage2(\"\")\n    const isFormEmpty = Object.values(formData).every((value) => value === '');\n    setIsEmpty(isFormEmpty);\n}, [formData]);\n\n  // Handle form submission\n  const onSubmit = () => {\n    setIsEmailSent(false)\n    setIsSubmitting(true);\n    console.log(formData);\n    formData.role = props.role; // Set form type\n\n    // Send a POST request to the server\n    axios.post(`${backEndLink}/${formData.role === 'As Supplier'?'sendemailtologinRecuireteragency':'sendemailtologin'}`, formData)\n      .then((res) => {\n        console.log(res);\n\n        setFormData({ email: ''}); // Clear form fields\n        setIsSubmitting(false);\n        setIsEmailSent(true)\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n        // console.error('Error2:', errorMessage2) ;\n        setErrorMessage2(error.response.data)\n        console.log('Error2:',errorMessage2) ;\n\n        if (error.response && error.response.data && error.response.data.message) {\n\n          setErrorMessage(error.response.data.message); // Set error message from the server\n        } else {\n          setErrorMessage('An error occurred. Please try again.');\n        }\n        setIsSubmitting(false);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"grid gap-5 pb-10 h-full max-h-[30rem]\">\n      {/* Form Header */}\n      <h1 className=\"m-auto text-black text-3xl font-bold\">{props.tittle}</h1>\n\n      {/* Email Input */}\n      <div className=\"text-black max-w-[349px] w-full grid justify-items-start\">\n        <label>Enter Email<span className=\"text-red-600\">: {errorMessage2} {errors.email?.message} {errorMessage === \"User not found.\" ||errorMessage ===  \"User not found2.\"? \"User not found.\" : \"\"}</span><span className='text-green-600'>{isEmailSent?\"Please check your email for the login verification link.\":\"\"}</span></label>\n        <input\n          type=\"text\"\n          {...register(\"email\")}\n          value={formData.email}\n          onChange={handleChange}\n          className=\"p-3 border h-11 max-w-[349px] w-full border-gray-400 rounded-md focus:outline-none focus:border-blue-500 bg-transparent\"\n        />\n      </div>\n\n      {/* Password Input */}\n     \n\n      {/* Forgot Password Link */}\n      <p className=\"font-bold justify-self-start text-[14px] self-end\">\n        \n        Click here to continue with a password: <a  onClick={()=>navigateWithPassword()} className=\"text-blue-500 hover:text-blue-400 justify-self-end cursor-pointer\">Continue</a>\n      </p>\n\n      {/* Login Button */}\n      <button\n        className={`rounded-md h-11 ${isEmpty ? 'border pointer-events-none border-gray-400 text-blue-400' : 'bg-blue-500 text-white hover:bg-blue-400'} rounded-md h-11 font-bold text-xl`}\n        type=\"submit\"\n        disabled={isSubmitting}\n      >\n        {isSubmitting ? <span className=\"loading loading-spinner loading-md\"></span> : \"Login\"}\n      </button>\n\n      {/* Create Account Links */}\n      <div className=\"grid gap-1 font-bold\">\n        <p className=\"m-0 text-left text-[14px] text-gray-600\">Login as Channel partner<a className=\"text-blue-500 hover:text-blue-400\" href=\"/login/channelPartner\"> Login</a></p>\n        <p className=\"m-0 text-left text-[14px] text-gray-600\">Login as Employer<a className=\"text-blue-500 hover:text-blue-400\" href=\"/login/employer\"> Login</a></p>\n        <p className=\"m-0 text-left text-[14px] text-gray-600\">Login as Supplier <a className=\"text-blue-500 hover:text-blue-400\" href=\"/login/supplier\"> Login</a></p>\n      </div>\n    </form>\n  );\n}\n\nexport default LoginFormByEmail;\n","import logo from '../../assets/logo.png'\nimport LoginForm from '../../components/Forms/loginForm.js';\nimport LoginFormByEmail from '../../components/Forms/loginFormByEmail.js'\nimport { useEffect,useState } from 'react';\n// import style from \"./style.module.css\";\n\n\nconst LoginAsEmployer = () => {\n  const [isByPassword, setIsByPassword] = useState(false)\n  useEffect(()=>{\n    const currentUrl = window.location.href;\n\n    // Extract the parameters from the URL\n    const urlParams = new URLSearchParams(currentUrl);\n\n    // Get the values of the parameters\n    const password = urlParams.get('password');\n    setIsByPassword(password==='true'?true:false)\n  },[])\n  return ( \n    <div className='flex justify-between w-full   '>\n      <div className='bg-blue-950 w-full max-w-full h-screen max-md:hidden  grid p-8'> \n        <img alt='logo' href = \"/\" className=\"w-[4rem]  m-0 justify-self-start transform hover:scale-[1.1] transition-transform duration-500 cursor-pointer\" src= {logo}/>\n        <div className='m-auto mt-[-5rem] w-full max-w-[30rem] grid gap-5'><h1 className='m-auto text-4xl font-bold text-[#BCBAC7]'>Welcome!</h1><p className='font-bold text-[#BCBAC7] text-[1.2rem]  '>Welcome to Seamless Job Matching, where your dream career meets its perfect match! ATS Login & Sign Up now to embark on your journey to professional success.</p></div>\n      </div>\n      <div className='bg-white w-full h-screen  flex align-center justify-center items-center p-8 ' >{isByPassword?<  LoginForm  tittle = \"Log in as Employer\" role = \"Owner\" />:<  LoginFormByEmail tittle = \"Log in as Employer\" role = \"Owner\" />}</div>\n    \n    </div>\n  );\n}\n\n\n\nexport default LoginAsEmployer;\n","export const backEndLink = 'https://test-back-end-dszgwhplxa-el.a.run.app';\n// export const backEndLink ='http://localhost:8080';\n\n"],"names":["props","_errors$email","_errors$password","_useState","useState","_useState2","_slicedToArray","isSubmitting","setIsSubmitting","_useState3","_useState4","isEmpty","setIsEmpty","navigate","useNavigate","_useState5","email","password","_useState6","formData","setFormData","_useState7","_useState8","errorMessage","setErrorMessage","schema","yup","shape","required","_useForm","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","handleChange","e","_e$target","target","name","value","_objectSpread","_defineProperty","useEffect","isFormFilled","Object","values","every","_jsxs","onSubmit","role","console","log","axios","post","concat","backEndLink","then","res","token","data","message","localStorage","setItem","catch","error","response","className","children","_jsx","tittle","type","onChange","href","disabled","setIsLoading","_useState9","_useState10","_useState11","_useState12","errorMessage2","setErrorMessage2","_useState13","_useState14","isEmailSent","setIsEmailSent","isFormEmpty","onClick","currentUrl","window","location","separator","includes","newUrl","navigateWithPassword","isByPassword","setIsByPassword","URLSearchParams","get","alt","src","logo","LoginForm","LoginFormByEmail"],"sourceRoot":""}